/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* Layers */

#define BAS  0
#define NUM  1
#define NAV  2

/ {
    behaviors {
      skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
      };

    combos {
        compatible = "zmk,combos";

        combo_winmed {
            bindings = <&to 5>;
            key-positions = <38 39>;
            layers = <0>;
        };
    };

    macros {
        Auml: Auml_shift {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_SHIFT_A";
            #binding-cells = <0>;
            bindings = <&kp LA(U) &kp LS(A)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BAS";
            bindings = <
        &kp TAB  &kp Q  &kp W     &kp F           &kp B        &kp P       &kp J           &kp L         &kp U    &kp Y  &kp SEMI        &kp ESC
&mt LCTRL LA(S)  &mt &Auml A  &kp R     &kp S         &lt 4 T        &kp G       &kp M         &lt 3 N         &kp E    &kp I     &kp O  &mt LCTRL SQT
      &kp LSHFT  &kp Z  &kp X     &kp C           &kp D        &kp V       &kp K           &kp H     &kp COMMA  &kp DOT  &kp FSLH  &mt LSHFT RET
                               &kp LGUI      &skq LSHFT  &lt 2 LA(U)  &lt 1 BSPC  &mt LALT SPACE  &mt LGUI ESC
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp KP_MULTIPLY  &kp KP_DIVIDE  &kp N7    &kp N8  &kp N9  &kp MINUS   &none           &none     &none   &none      &none  &trans
         &trans         &kp N0  &kp N1    &kp N2  &kp N3   &kp PLUS   &none        &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
      &kp LSHFT   &kp KP_EQUAL  &kp N4    &kp N5  &kp N6  &kp COMMA  &trans          &trans    &trans  &trans     &trans  &trans
                                        &kp LGUI  &trans      &none   &none  &mt LALT SPACE    &trans
            >;
        };

        navigation_layer {
            label = "NAV";
            bindings = <
    &none  &none  &none     &none   &none  &none              &none  &kp LS(LA(LC(J)))  &kp LS(LA(LC(K)))    &kp LS(LA(T))          &none   &none
    &none  &none  &none     &none   &none  &none  &kp LS(LA(SPACE))           &kp LEFT           &kp DOWN           &kp UP      &kp RIGHT   &none
&kp LSHFT  &none  &none     &none   &none  &none              &none      &kp LS(LA(N))      &kp LS(LA(M))  &kp LS(LA(RET))  &kp LS(LA(O))  &trans
                         &kp LGUI  &trans  &none              &none     &mt LALT SPACE             &trans
            >;
        };

        SYMBOLS_LL {
            bindings = <
&none      &none   &kp HASH  &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &none  &none  &none  &none  &none       &none  &none
&none  &kp CARET  &kp COLON          &kp LPAR           &kp RPAR  &kp STAR  &none  &none  &none  &none  &kp DOLLAR  &none
&none      &none  &kp PRCNT          &kp LBRC           &kp RBRC     &none  &none  &none  &none  &none       &none  &none
                                        &none              &none     &none  &none  &none  &none
            >;
        };

        SYMBOLS_LR {
            bindings = <
&none     &none  &none  &none  &none  &none      &none       &kp AMPS   &kp PIPE          &kp BSLH      &none  &none
&none  &kp EXCL  &none  &none  &none  &none  &kp GRAVE  &kp LESS_THAN  &kp MINUS  &kp GREATER_THAN  &kp EQUAL  &none
&none     &none  &none  &none  &none  &none      &none         &kp AT  &kp UNDER         &kp TILDE      &none  &none
                        &none  &none  &none      &none          &none      &none
            >;
        };

        MEDIA_WIN {
            bindings = <
   &kp TAB         &none    &kp C_PREV  &kp C_PLAY_PAUSE    &kp C_NEXT  &kp C_BRI_UP  &kp LA(LC(U))  &kp LA(LC(I))  &kp LA(LC(E))  &kp LA(LC(C))  &kp LA(LC(T))   &none
     &none         &none  &kp C_VOL_DN        &kp C_MUTE  &kp C_VOL_UP  &kp C_BRI_DN  &kp LA(LC(J))  &kp LA(LC(K))  &kp LA(LC(D))  &kp LA(LC(F))  &kp LA(LC(G))  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &none          &none          &none          &none          &none   &none
                                                  &trans         &none         &none          &to 0          &none         &trans
            >;
        };
    };
};
